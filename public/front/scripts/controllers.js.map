{"version":3,"sources":["dashboardControllers.js","bodyControllers.js","registerControllers.js","adminControllers.js","usersControllers.js","placesControllers.js","pollControllers.js","opinionsControllers.js","pollAnswersControllers.js","pollstersControllers.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACttntGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpfile":"controllers.js","sourcesContent":["interMap.controller('dashboardController', ['$scope', function ($scope) {\n        console.log('dashboardController');\n    }]);\ninterMap.controller('testController', ['$scope', function ($scope) {\n        console.log('testController');\n    }]);\n","interMap.controller('bodyController', ['$scope', '$rootScope', '$http', '$state', '$location', 'growl', '$cookies',\n    function ($scope, $rootScope, $http, $state, $location, growl, $cookies) {\n        $rootScope.$state = $state;\n        $scope.admin = false;\n\n        var loginStatus = $cookies.getObject('logged');\n\n        if (angular.isDefined($rootScope.loggedUser) || loginStatus) {\n            if ($rootScope.loggedUser) {\n                $scope.loggedUser = true;\n            } else {\n                $rootScope.permissions = {};\n                $rootScope.permissions.user = loginStatus;\n                $scope.loggedUser = true;\n                console.log('loginStatus',loginStatus);\n            }\n        } else {\n            $scope.loggedUser = false;\n            $state.go('login');\n        }\n\n        angular.extend($scope, {\n            logIn: function (loginForm) {\n                $http({\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    url: '/auth',\n                    method: 'POST',\n                    data: {\n                        email: $scope.login.username,\n                        password: $scope.login.password\n                    }\n                }).success(function (response) {\n                    if (response.success) {\n                        $rootScope.permissions = {};\n                        $rootScope.permissions.user = response.data;\n                        $rootScope.loggedUser = true;\n                        $scope.loggedUser = true;\n                        $cookies.putObject('logged', response.data);\n                        $state.go('dashboard');\n                        growl.addSuccessMessage('Witaj ' + response.data.name + '!');\n                    } else {\n                        growl.addErrorMessage(response.error);\n                    }\n                });\n            }\n        });\n\n        $scope.logout = function () {\n            $scope.loggedUser = false;\n            $rootScope.loggedUser = false;\n            $cookies.remove('logged');\n            $state.go('login');\n            growl.addErrorMessage('Zostałeś wylogowany ! Zapraszamy ponownie !');\n        }\n\n        $scope.register = function () {\n            $state.go('register');\n        }\n\n        $scope.isActive = function (state, menuState) {\n            var menuActive = state.current.menuActive;\n            return state.current.name == menuState || (angular.isDefined(menuActive) && menuActive == menuState);\n        };\n\n        $scope.adminMenu = function () {\n            $scope.admin = !$scope.admin;\n        }\n    }]);\n\n","interMap.controller('registerController', ['$scope', '$rootScope', '$http', '$state', 'growl', function ($scope, $rootScope, $http, $state, growl) {\n        angular.extend($scope, {\n            registerIn: function (registerForm) {\n                console.log($scope.user);\n                $http({\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    url: '/register',\n                    method: 'POST',\n                    data:  $scope.user\n                }).success(function (response) {\n                    if (response.success) {\n                        $state.go('login');\n                        growl.addSuccessMessage('Rejestracja przebiegła pomyślnie !');\n                    } else {\n                        $scope.error = response.error;\n                    }\n                });\n            }\n        });\n    }]);\n","interMap.controller('adminController', ['$scope', '$rootScope', '$http', '$state', 'growl', function ($scope, $rootScope, $http, $state, growl) {\n\n    }]);\n","interMap.controller('usersController', ['$scope', '$rootScope', '$http', '$state', 'growl', function ($scope, $rootScope, $http, $state, growl) {\n\n        var url = '/api/user/';\n\n        $scope.getUsers = function () {\n            return $http.get(url);\n        };\n\n        $scope.removeUser = function (id) {\n            return $http.delete(url + id);\n        }\n\n        $scope.getUsers()\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.users = response.data.data;\n                    }\n                });\n\n        $scope.remove = function ($event, id) {\n            $event.stopImmediatePropagation();\n\n            $scope.removeUser(id).\n                    success(function (data) {\n                        if (data.success) {\n                            angular.forEach($scope.users, function (val, key) {\n                                if (val.id == id) {\n                                    $scope.users.splice(key, 1);\n                                }\n                            });\n                            growl.addSuccessMessage('Użytkownik został usunięty !');\n                        } else if (data.error) {\n                            growl.addErrorMessage(data.error);\n                        }\n                    });\n        };\n\n        $scope.editUser = function (id) {\n            var params = {};\n            params.userId = id;\n            $state.go('editUser', params);\n        };\n\n        $scope.addUser = function () {\n            $state.go('newUser');\n        };\n\n    }]);\n\ninterMap.controller('userController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', function ($scope, $stateParams, $rootScope, $http, $state, growl) {\n\n        if (angular.isDefined($stateParams.userId)) {\n            $scope.userId = $stateParams.userId;\n        }\n\n        $scope.editMode = false;\n        $scope.user = {};\n        $scope.roles = ['user', 'admin'];\n\n        var url = '/api/user/';\n\n        if (angular.isDefined($scope.userId)) {\n            $scope.editMode = true;\n\n            $http.get(url + $scope.userId)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.user = response.data.user;\n                        } else {\n                            growl.addErrorMessage(response.data.error);\n                        }\n                    });\n        }\n\n        $scope.cancel = function () {\n            $state.go('users');\n        };\n\n        $scope.saveUser = function (user, editMode) {\n            if (editMode) {\n                return $http.put(url + $scope.user.id, user)\n                        .then(function (response) {\n                            console.log(response);\n                            if (response.data.success) {\n                                growl.addSuccessMessage('Użytkownik został zaktualizowany !');\n                                $state.go('users');\n                            } else {\n                                $scope.error = response.data.error;\n                            }\n                        });\n            } else {\n                return $http.post(url, user)\n                        .then(function (response) {\n                            console.log(response);\n                            if (response.data.success) {\n                                growl.addSuccessMessage('Użytkownik został dodany !');\n                                $state.go('users');\n                            } else {\n                                $scope.error = response.data.error;\n                            }\n                        });\n            }\n        };\n\n        $scope.passMismatched = function () {\n            if (angular.isDefined($scope.userForm)) {\n                return $scope.userForm.password_confirmation.$error.match;\n            }\n        };\n\n    }]);\n","interMap.controller('placesListController', ['$scope', '$rootScope', '$http', '$state', 'growl', '$uibModal', function ($scope, $rootScope, $http, $state, growl, $uibModal) {\n\n        var url = '/api/place/';\n\n        $scope.getPlaces = function () {\n            return $http.get(url);\n        };\n\n        $scope.getPlaces()\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.places = response.data.data;\n                    }\n                });\n\n        $scope.addRate = function (place) {\n            var modalInstance = $uibModal.open({\n                templateUrl: '/front/views/places-list/components/modal/rate.tpl.html',\n                controller: 'placeModalController',\n                resolve: {\n                    place: function () {\n                        return {\n                            id: place.id,\n                            name: place.name\n                        };\n                    }\n                }\n            });\n\n            modalInstance.result.then(function (data) {\n                $state.go($state.current, {}, {reload: true});\n                growl.addSuccessMessage('Ankieta została dodana pomyślnie !');\n            });\n        };\n\n    }]);\n\ninterMap.controller('placePageController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', '$uibModal', function ($scope, $stateParams, $rootScope, $http, $state, growl, $uibModal) {\n\n        if (angular.isDefined($stateParams.placeId)) {\n            $scope.placeId = $stateParams.placeId;\n        }\n\n        $scope.isLoading = true;\n\n        $scope.place = {};\n        $scope.opinions = [];\n\n        var url = '/api/place/';\n\n        if (angular.isDefined($scope.placeId)) {\n            $scope.editMode = true;\n\n            $http.get(url + $scope.placeId)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.place = response.data.place;\n                            $scope.rate_place = response.data.place.rate;\n                            $scope.opinions = response.data.opinions;\n                            $scope.users = response.data.users;\n                        } else {\n                            growl.addErrorMessage(response.data.error);\n                        }\n                    })\n                    .finally(function () {\n                        $scope.isLoading = false;\n                    });\n        }\n\n\n        $scope.addRate = function (placeId) {\n            var modalInstance = $uibModal.open({\n                templateUrl: '/front/views/places-list/components/modal/rate.tpl.html',\n                controller: 'placeModalController',\n                resolve: {\n                    place: function () {\n                        return {\n                            id: placeId,\n                            name: $scope.place.name\n                        };\n                    }\n                }\n            });\n\n            modalInstance.result.then(function (data) {\n                $state.go($state.current, {}, {reload: true});\n                growl.addSuccessMessage('Ankieta została dodana pomyślnie !');\n            });\n        };\n\n        $scope.addOpinion = function (opinion) {\n            if (angular.isDefined(opinion.opinion)) {\n                var opinionUrl = '/api/opinion/';\n                opinion.object_id = $scope.placeId;\n                opinion.user_id = $rootScope.permissions.user.id;\n                $http.post(opinionUrl, opinion).\n                        success(function (response) {\n                            if (response.success) {\n                                $scope.opinions.push(response.opinion);\n                                $scope.new_opinion.opinion = '';\n                            } else {\n                                if (typeof response.error === 'object') {\n                                    $scope.formErrors = response.error;\n                                } else {\n                                    growl.addErrorMessage('Nie udało się dodać opinii !');\n                                }\n                            }\n                        }).\n                        finally(function () {\n                            $scope.isLoading = false;\n                        });\n            }\n        };\n\n        $scope.cancel = function () {\n            $state.go('placesList');\n        };\n\n    }]);\n\ninterMap.controller('placeModalController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', 'place', '$uibModalInstance', function ($scope, $stateParams, $rootScope, $http, $state, growl, place, $uibModalInstance) {\n\n        $scope.rate = {};\n\n        if (angular.isDefined(place)) {\n            $scope.placeId = place.id;\n            $scope.rate.object_id = place.id;\n            $scope.place = place;\n        }\n\n        var pollUrl = '/api/poll/';\n\n        $http.get(pollUrl)\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.questions = response.data.data;\n                        $scope.statuses = response.data.statuses;\n                        $scope.sexs = response.data.sex;\n                        $scope.students = response.data.students;\n                        $scope.voivodeships = response.data.voivodeships;\n                    } else {\n                        growl.addErrorMessage(response.data.error);\n                    }\n                });\n\n        var pollAnswerUrl = '/api/answers/';\n\n        $scope.save = function () {\n            $scope.isLoading = true;\n            $scope.rate.user_id = $rootScope.permissions.user.id;\n            $scope.rate.user_email = $rootScope.permissions.user.email;\n            $http.post(pollAnswerUrl, $scope.rate).\n                    success(function (data) {\n                        if (data.success) {\n                            $uibModalInstance.close(data.rate);\n                        } else {\n                            if (typeof data.error === 'object') {\n                                $scope.formErrors = data.error;\n                            } else {\n                                growl.addErrorMessage('Nie udało się dodać ankiety !');\n                            }\n                        }\n                    }).\n                    finally(function () {\n                        $scope.isLoading = false;\n                    });\n        };\n\n        $scope.cancel = function () {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n    }]);\n\ninterMap.factory('stars', [function () {\n        /**\n         * Draw wrapping rectangle\n         *\n         * @param ctx {Object} 2d context\n         * @param dim {Number}\n         * @param backColor {String}\n         */\n        function _drawRect(ctx, dim, backColor) {\n            if (!ctx)\n                throw Error('No Canvas context found!');\n            ctx.save();\n            ctx.width = dim;\n            ctx.height = dim;\n            ctx.fillStyle = backColor;\n            ctx.fillRect(0, 0, dim, dim);\n            ctx.restore();\n        }\n        /**\n         * Draw one star with certain general params\n         *\n         * @param empty {Boolean} Draw transparent or filled star\n         * @param ctx {Object} 2d context\n         * @param x {Number}\n         * @param y {Number}\n         * @param r {Number}\n         * @param p {Number}\n         * @param m {Number}\n         * @param style {String} Star background color (in case of filled star)\n         * @private\n         */\n        function _star(empty, ctx, x, y, r, p, m, style) {\n            if (!ctx)\n                throw Error('No Canvas context found!');\n            ctx.save();\n            if (empty) {\n                ctx.globalCompositeOperation = 'destination-out';\n            } else {\n                ctx.fillStyle = style || 'gold';\n            }\n            ctx.beginPath();\n            ctx.translate(x, y);\n            ctx.moveTo(0, 0 - r);\n            for (var i = 0; i < p; i++)\n            {\n                ctx.rotate(Math.PI / p);\n                ctx.lineTo(0, 0 - (r * m));\n                ctx.rotate(Math.PI / p);\n                ctx.lineTo(0, 0 - r);\n            }\n            ctx.fill();\n            ctx.restore();\n        }\n        // Draw one empty star\n        function emptyStar(ctx, r, rectBackColor) {\n            _drawRect(ctx, r * 2, rectBackColor);\n            _star(true, ctx, r, r, r, 5, 0.5);\n        }\n        // Draw one filled star\n        function filledStar(ctx, r, rectBackColor, style) {\n            _drawRect(ctx, r * 2, rectBackColor);\n            _star(false, ctx, r, r, r, 5, 0.5, style);\n        }\n        // Current API\n        return {\n            emptyStar: emptyStar\n        }\n    }]);\n\ninterMap.factory('starsUtility', [function () {\n        /**\n         * Creates an array with index values\n         *\n         * @param n {Number}\n         * @returns {Array}\n         */\n        var createRange = function (n) {\n            var i = 0;\n            var range = new Array(n);\n            while (i < n) {\n                range[i++] = i;\n            }\n            return range;\n        };\n        /**\n         * Calculate percent of area to filled with color star\n         *\n         * @param attrs {Object}\n         * @returns {Number}\n         */\n        var calculatePercent = function (attrs) {\n            var percent, stars, selectedStars;\n            if (!attrs) {\n                return 0;\n            } else if (attrs.ratingPercent) {\n                percent = parseInt(attrs.ratingPercent) ? parseInt(attrs.ratingPercent) : 0;\n                return percent > 100 ? 100 : percent;\n            } else if (attrs.ratingStars) {\n                stars = parseInt(attrs.stars || 5);\n                selectedStars = parseFloat(attrs.ratingStars) > stars ? stars : parseFloat(attrs.ratingStars);\n                return (100 / stars) * selectedStars || 0.0;\n            }\n        };\n        /**\n         * Calculate how many stars should be filled (in percent)\n         *\n         * @param totalStars\n         * @param totalWidth\n         * @param starWidth\n         * @param width\n         * @returns {number}\n         */\n        var percentFullStars = function (totalStars, totalWidth, starWidth, width) {\n            var pxPerOneStar = totalWidth / totalStars;\n            var percentPerOneStar = 100 / totalStars;\n            return Math.ceil(width / pxPerOneStar) * percentPerOneStar;\n        };\n        /**\n         * Calculate stars in percents\n         *\n         * @param totalStars\n         * @param percent\n         * @param precision\n         * @returns {string}\n         */\n        var starsByPercent = function (totalStars, percent, precision) {\n            var percentPerOneStar = 100 / totalStars;\n            return (percent / percentPerOneStar).toFixed(precision || 2);\n        };\n        return {\n            createRange: createRange,\n            calculatePercent: calculatePercent,\n            percentFullStars: percentFullStars,\n            starsByPercent: starsByPercent\n        };\n    }]);\n// ------------------------\n//        DIRECTIVE\n// ------------------------\ninterMap.directive('starRating', ['$compile', '$templateCache', '$timeout', function ($compile, $templateCache, $timeout) {\n        return {\n            restrict: 'A',\n            scope: {\n                percent: \"=outerPercent\",\n                starsSelected: \"=outerStarSelection\"\n            },\n            template: '<div class=\"stars\" style=\"background-color: {{emptyBackColor}}\"><div class=\"stars-selected\" style=\"width: {{percent}}%; background-color: {{selColor}};\"></div></div>',\n            controller: function ($scope, stars, starsUtility) {\n                // Apply Utilities\n                for (var method in starsUtility) {\n                    (function (m) {\n                        $scope[m] = function () {\n                            return starsUtility[m].apply(null, arguments);\n                        };\n                    }(method));\n                }\n                // Invoke the factory method: draw transparent star\n                $scope.drawStar = function () {\n                    return stars.emptyStar.apply(null, arguments);\n                };\n            },\n            link: function ($scope, el, attrs) {\n                // Configs\n                var starEl = [];\n                var wrapper = angular.element(el[0].querySelector('.stars'));\n                var filler = angular.element(el[0].querySelector('.stars-selected'));\n                $scope.howManyStars = $scope.createRange(attrs.stars) || $scope.createRange(5);\n                $scope.starRadius = parseInt(attrs.starRadius) || 20;\n                $scope.percent = $scope.prevPercent = $scope.calculatePercent(attrs);\n                $scope.backColor = attrs.backColor || 'white';\n                $scope.emptyBackColor = attrs.emptyBackColor || '#d3d3d3';\n                $scope.selColor = attrs.selColor || 'gold';\n                $scope.ratingDefine = attrs.ratingDefine || false;\n                // Allowed to define a new rating?\n                // -------------------------------\n                if ($scope.ratingDefine) {\n                    // watch percent value to update the view\n                    $scope.$watch('percent', function (newValue, oldValue) {\n                        filler.css('width', newValue + '%');\n                        $scope.starsSelected = $scope.starsByPercent($scope.howManyStars.length, $scope.percent);\n                    });\n                    // handle events to change the rating\n                    $scope.changeRating = function (e) {\n                        var el = wrapper[0];\n                        var w = el.offsetWidth;\n                        var selected = e.clientX - el.getBoundingClientRect().left + 1;\n                        var newPercent = $scope.ratingDefine == 'star' ? $scope.percentFullStars($scope.howManyStars.length, w, $scope.starRadius * 2, selected) : Math.floor((selected * 100) / w);\n                        $scope.percent = newPercent > 100 ? 100 : newPercent;\n                    };\n                    $scope.leaveRating = function () {\n                        $scope.percent = $scope.prevPercent;\n                    };\n                    $scope.secureNewRating = function () {\n                        $scope.prevPercent = $scope.percent;\n                    };\n                }\n                // add canvas to DOM first\n                $scope.howManyStars.forEach(function () {\n                    var star = angular.element('<canvas class=\"star\" height=\"{{starRadius*2}}\" width=\"{{starRadius*2}}\"></canvas>');\n                    $compile(star)($scope);\n                    wrapper.append(star);\n                    starEl.push(star);\n                });\n                // we should wait for next JS 'tick' to show up the stars\n                $timeout(function () {\n                    starEl.forEach(function (el) {\n                        $scope.drawStar(el[0].getContext(\"2d\"), $scope.starRadius, $scope.backColor);\n                    });\n                    wrapper.css('visibility', 'visible'); // this to avoid to show partly rendered layout\n                });\n            }\n        };\n    }]);\n","interMap.controller('pollController', ['$scope', '$rootScope', '$http', '$state', 'growl', function ($scope, $rootScope, $http, $state, growl) {\n\n        var url = '/api/poll/';\n\n        $scope.getQuestions = function () {\n            return $http.get(url);\n        };\n\n        $scope.removeQuestion = function (id) {\n            return $http.delete(url + id);\n        }\n\n        $scope.getQuestions()\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.questions = response.data.data;\n                    }\n                });\n\n        $scope.remove = function ($event, id) {\n            $event.stopImmediatePropagation();\n\n            $scope.removeQuestion(id).\n                    success(function (data) {\n                        if (data.success) {\n                            angular.forEach($scope.questions, function (val, key) {\n                                if (val.id == id) {\n                                    $scope.questions.splice(key, 1);\n                                }\n                            });\n                            growl.addSuccessMessage('Pytanie zostało usunięte !');\n                        } else if (data.error) {\n                            growl.addErrorMessage(data.error);\n                        }\n                    });\n        };\n\n        $scope.editQuestion = function (id) {\n            var params = {};\n            params.questionId = id;\n            $state.go('editQuestion', params);\n        };\n\n        $scope.addQuestion = function () {\n            $state.go('newQuestion');\n        };\n\n    }]);\n\ninterMap.controller('questionController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', function ($scope, $stateParams, $rootScope, $http, $state, growl) {\n\n        if (angular.isDefined($stateParams.questionId)) {\n            $scope.questionId = $stateParams.questionId;\n        }\n\n        $scope.editMode = false;\n        $scope.question = {};\n\n        var url = '/api/poll/';\n\n        if (angular.isDefined($scope.questionId)) {\n            $scope.editMode = true;\n\n            $http.get(url + $scope.questionId)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.question = response.data.question;\n                        } else {\n                            growl.addErrorMessage(response.data.error);\n                        }\n                    });\n        }\n\n        $scope.cancel = function () {\n            $state.go('poll');\n        };\n\n        $scope.saveQuestion = function (question, editMode) {\n            if (editMode) {\n                return $http.put(url + $scope.question.id, question)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                growl.addSuccessMessage('Pytanie zostało zaktualizowane !');\n                                $state.go('poll');\n                            } else {\n                                $scope.error = response.data.error;\n                            }\n                        });\n            } else {\n                return $http.post(url, question)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                growl.addSuccessMessage('Pytanie zostało dodane !');\n                                $state.go('poll');\n                            } else {\n                                $scope.error = response.data.error;\n                            }\n                        });\n            }\n        };\n\n    }]);\n","interMap.controller('opinionsController', ['$scope', '$rootScope', '$http', '$state', 'growl', function ($scope, $rootScope, $http, $state, growl) {\n\n        var url = '/api/opinion/';\n\n        $scope.getOpinions = function () {\n            return $http.get(url);\n        };\n\n        $scope.removeOpinion = function (id) {\n            return $http.delete(url + id);\n        }\n        \n        $scope.status = {\n            5: 'Niekatywna',\n            10: 'Aktywna'\n        };\n\n        $scope.getOpinions()\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.opinions = response.data.data;\n                    }\n                });\n\n        $scope.remove = function ($event, id) {\n            $event.stopImmediatePropagation();\n\n            $scope.removeOpinion(id).\n                    success(function (data) {\n                        if (data.success) {\n                            angular.forEach($scope.opinions, function (val, key) {\n                                if (val.id == id) {\n                                    $scope.opinions.splice(key, 1);\n                                }\n                            });\n                            growl.addSuccessMessage('Opinia została usunięta !');\n                        } else if (data.error) {\n                            growl.addErrorMessage(data.error);\n                        }\n                    });\n        };\n\n        $scope.editOpinion = function (id) {\n            var params = {};\n            params.opinionId = id;\n            $state.go('editOpinion', params);\n        };\n\n        $scope.addOpinion = function () {\n            $state.go('newOpinion');\n        };\n\n    }]);\n\ninterMap.controller('opinionController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', function ($scope, $stateParams, $rootScope, $http, $state, growl) {\n\n        if (angular.isDefined($stateParams.opinionId)) {\n            $scope.opinionId = $stateParams.opinionId;\n        }\n\n        $scope.editMode = false;\n        $scope.opinion = {};\n\n        var url = '/api/opinion/';\n\n        if (angular.isDefined($scope.opinionId)) {\n            $scope.editMode = true;\n\n            $http.get(url + $scope.opinionId)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.opinion = response.data.opinion;\n                        } else {\n                            growl.addErrorMessage(response.data.error);\n                        }\n                    });\n        }\n\n        $scope.cancel = function () {\n            $state.go('opinions');\n        };\n\n        $scope.saveOpinion = function (opinion, editMode) {\n            if (editMode) {\n                return $http.put(url + $scope.opinion.id, opinion)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                growl.addSuccessMessage('Opinia została zaktualizowana !');\n                                $state.go('opinions');\n                            } else {\n                                $scope.error = response.data.error;\n                            }\n                        });\n            } else {\n                return $http.post(url, opinion)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                growl.addSuccessMessage('Opinia została dodana !');\n                                $state.go('opinions');\n                            } else {\n                                $scope.error = response.data.error;\n                            }\n                        });\n            }\n        };\n\n    }]);\n","interMap.controller('pollAnswersController', ['$scope', '$rootScope', '$http', '$state', 'growl', function ($scope, $rootScope, $http, $state, growl) {\n\n        var url = '/api/answers/';\n\n        $scope.getPollAnswers = function () {\n            return $http.get(url);\n        };\n\n        $scope.removePollAnswers = function (id) {\n            return $http.delete(url + id);\n        }\n        \n        $scope.status = {\n            5: 'Niekatywna',\n            10: 'Aktywna'\n        };\n\n        $scope.getPollAnswers()\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.answers = response.data.data;\n                    }\n                });\n\n        $scope.remove = function ($event, id) {\n            $event.stopImmediatePropagation();\n\n            $scope.removePollAnswers(id).\n                    success(function (data) {\n                        if (data.success) {\n                            angular.forEach($scope.answers, function (val, key) {\n                                if (val.poll_id == data.poll.poll_id) {\n                                    $scope.answers.splice(key, 1);\n                                }\n                            });\n                            growl.addSuccessMessage('Ankieta została usunięta !');\n                        } else if (data.error) {\n                            growl.addErrorMessage(data.error);\n                        }\n                    });\n        };\n\n        $scope.editPollAnswers = function (id) {\n            var params = {};\n            params.pollId = id;\n            $state.go('editPoll', params);\n        };\n\n        $scope.addPollAnswers = function () {\n            $state.go('newPoll');\n        };\n\n    }]);\n\ninterMap.controller('pollAnswerController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', function ($scope, $stateParams, $rootScope, $http, $state, growl) {\n\n        if (angular.isDefined($stateParams.pollId)) {\n            $scope.pollId = $stateParams.pollId;\n        }\n\n        $scope.editMode = false;\n        $scope.rate = {};\n\n        var url = '/api/answers/';\n        var pollUrl = '/api/poll/';\n        var placeUrl = '/api/place/';\n\n        $scope.getPlaces = function () {\n            return $http.get(placeUrl);\n        };\n\n        $scope.getPlaces()\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.places = response.data.data;\n                    }\n                });\n\n        $http.get(pollUrl)\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.questions = response.data.data;\n                        $scope.statuses = response.data.statuses;\n                        $scope.sexs = response.data.sex;\n                        $scope.voivodeships = response.data.voivodeships;\n                    } else {\n                        growl.addErrorMessage(response.data.error);\n                    }\n                });\n\n        if (angular.isDefined($scope.pollId)) {\n            $scope.editMode = true;\n\n            $http.get(url + $scope.pollId)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.rate = response.data.poll;\n                        } else {\n                            growl.addErrorMessage(response.data.error);\n                        }\n                    });\n        }\n\n        $scope.cancel = function () {\n            $state.go('pollAnswers');\n        };\n\n        $scope.savePollAnswers = function (rate, editMode) {\n            if (editMode) {\n                return $http.put(url + rate.poll_id, rate)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                growl.addSuccessMessage('Ankieta została zaktualizowana !');\n                                $state.go('pollAnswers');\n                            } else {\n                                $scope.error = response.data.error;\n                            }\n                        });\n            } else {\n                return $http.post(url, rate)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                growl.addSuccessMessage('Ankieta została dodana !');\n                                $state.go('pollAnswers');\n                            } else {\n                                $scope.error = response.data.error;\n                            }\n                        });\n            }\n        };\n\n    }]);\n","interMap.controller('pollstersController', ['$scope', '$rootScope', '$http', '$state', 'growl', function ($scope, $rootScope, $http, $state, growl) {\n\n        var url = '/api/pollsters/';\n\n        $scope.getPollsters = function () {\n            return $http.get(url);\n        };\n\n        $scope.removePollster = function (id) {\n            return $http.delete(url + id);\n        }\n\n        $scope.getPollsters()\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.pollsters = response.data.data;\n                    }\n                });\n\n        $scope.remove = function ($event, id) {\n            $event.stopImmediatePropagation();\n\n            $scope.removePollster(id).\n                    success(function (data) {\n                        if (data.success) {\n                            console.log('data',data);\n                            angular.forEach($scope.pollsters, function (val, key) {\n                                if (val.id == data.pollster.id) {\n                                    $scope.pollsters.splice(key, 1);\n                                }\n                            });\n                            growl.addSuccessMessage('Ankieter został usunięty !');\n                        } else if (data.error) {\n                            growl.addErrorMessage(data.error);\n                        }\n                    });\n        };\n\n        $scope.editPollster = function (id) {\n            var params = {};\n            params.pollsterId = id;\n            $state.go('editPollster', params);\n        };\n\n        $scope.addPollster = function () {\n            $state.go('newPollster');\n        };\n\n    }]);\n\ninterMap.controller('pollsterController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', function ($scope, $stateParams, $rootScope, $http, $state, growl) {\n\n        if (angular.isDefined($stateParams.pollsterId)) {\n            $scope.pollsterId = $stateParams.pollsterId;\n        }\n\n        $scope.editMode = false;\n        $scope.pollster = {};\n\n        var url = '/api/pollsters/';\n\n        if (angular.isDefined($scope.pollsterId)) {\n            $scope.editMode = true;\n\n            $http.get(url + $scope.pollsterId)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.pollster = response.data.pollster;\n                        } else {\n                            growl.addErrorMessage(response.data.error);\n                        }\n                    });\n        }\n\n        $scope.cancel = function () {\n            $state.go('pollsters');\n        };\n\n        $scope.savePollster = function (pollster, editMode) {\n            if (editMode) {\n                return $http.put(url + $scope.pollster.id, pollster)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                growl.addSuccessMessage('Ankieter został zaktualizowany !');\n                                $state.go('pollsters');\n                            } else {\n                                $scope.error = response.data.error;\n                            }\n                        });\n            } else {\n                return $http.post(url, pollster)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                growl.addSuccessMessage('Ankieter został dodany !');\n                                $state.go('pollsters');\n                            } else {\n                                $scope.error = response.data.error;\n                            }\n                        });\n            }\n        };\n\n    }]);\n"],"sourceRoot":"/source/"}